"use strict";
/// <reference path="index.d.ts" />
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var discord_js_1 = require("discord.js");
var client = new discord_js_1.Client();
client.on('ready', function () {
    console.log("Client is logged in as " + client.user.tag + " and ready!");
});
client.on('guildCreate', function (g) {
    var channel = g.channels.cache.random();
    if (!channel)
        return;
    channel.setName('foo').then(function (updatedChannel) {
        console.log("New channel name: " + updatedChannel.name);
    });
});
client.on('messageReactionRemoveAll', function (message) { return __awaiter(_this, void 0, void 0, function () {
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                console.log("messageReactionRemoveAll - id: " + message.id + " (" + message.id.length + ")");
                if (!message.partial) return [3 /*break*/, 2];
                return [4 /*yield*/, message.fetch()];
            case 1:
                message = _a.sent();
                _a.label = 2;
            case 2:
                console.log("messageReactionRemoveAll - content: " + message.content);
                return [2 /*return*/];
        }
    });
}); });
client.on('message', function (_a) {
    var channel = _a.channel;
    assertIsMessage(channel.send('string'));
    assertIsMessage(channel.send({}));
    assertIsMessage(channel.send({ embed: {} }));
    assertIsMessage(channel.send({ another: 'property' }, {}));
    var attachment = new discord_js_1.MessageAttachment('file.png');
    var embed = new discord_js_1.MessageEmbed();
    assertIsMessage(channel.send(attachment));
    assertIsMessage(channel.send(embed));
    assertIsMessage(channel.send([attachment, embed]));
    assertIsMessageArray(channel.send(Symbol('another primitive'), { split: true }));
    assertIsMessageArray(channel.send({ split: true }));
    // @ts-expect-error
    channel.send();
    // @ts-expect-error
    channel.send({ another: 'property' });
});
client.login('absolutely-valid-token');
